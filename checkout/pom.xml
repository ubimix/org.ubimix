<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://maven.apache.org/POM/4.0.0"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.ubimix.init</groupId>
    <artifactId>org.ubimix.init.checkout</artifactId>
    <name>${project.artifactId}</name>
    <version>1.2.1</version>
    <packaging>pom</packaging>
    <properties>
        <workspaceDir>${project.basedir}/../../projects</workspaceDir>
        <projectListFile>${project.basedir}/projects.json</projectListFile>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>gmaven-plugin</artifactId>
                <version>1.4</version>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source><![CDATA[
                                import net.minidev.json.*;
                                
                                JSONObject readJSON(File file) {
                                    java.io.Reader reader = file.newReader();
                                    try {
                                        JSONObject descr = JSONValue.parse( reader );
                                        return descr;
                                    } finally {
                                        reader.close();
                                    }
                                }
                                void clone(String url, File dir) {
                                    dir.getParentFile().mkdirs();
                                    String command = "git clone $url"
                                    if (dir != null) {
                                         command += " $dir"
                                    } 

                                    println("==========================");
                                    println("Clone '" + url + "'" );
                                    println("Dir  '" + dir + "'");

                                    def proc = command.execute();
                                    proc.waitFor();
                                    if (proc.exitValue() != 0) {
                                        println("ERROR!");
                                        println("return code: ${proc.exitValue()}")
                                        println("stderr: ${proc.err.text}")
                                        println("stdout: ${proc.in.text}")
                                    } else {
                                        println("OK");
                                    }
                                }
                                
                                String workspaceDirName = project.properties.workspaceDir; 
                                File workspaceDir = new File(workspaceDirName).getCanonicalFile();
 
                                String projectListFile = project.properties.projectListFile;
                                File file = new File(projectListFile);
                                JSONObject descr = readJSON(file);
                                JSONArray array = descr.get("projects");
                                for (JSONAware value : array) {
                                    if (value instanceof JSONObject) {
                                        JSONObject gitProject = (JSONObject) value;
                                        String url = gitProject.get("url");
                                        String name = gitProject.get("name");
                                        File dir = name != null ? new File(workspaceDir, name) : null;
                                        clone(url, dir);
                                    }
                                }
                            ]]></source>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>net.minidev</groupId>
            <artifactId>json-smart</artifactId>
            <version>1.1.1</version>
        </dependency>
    </dependencies>
</project>